// Framework grid generation
//
// Used only by Bootstrap to generate the correct number of grid classes given
// any value of `@grid-columns`.


//生成以下class
//.col-xs-1, .col-sm-1, .col-md-1, .col-lg-1,
//.col-xs-2, .col-sm-2, .col-md-2, .col-lg-2,
//.col-xs-3, .col-sm-3, .col-md-3, .col-lg-3,
//.......{
//      position: relative;
//      min-height: 1px;
//      padding-left: 15px;
//      padding-right: 15px;
//}
.make-grid-columns() {
  // Common styles for all sizes of grid columns, widths 1-12
  .col(@index) {
    //'~'号搭配字符串 用于避免编译，详情 http://www.bootcss.com/p/lesscss/
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), @item)
  }

  // =<就是小于或等于，好逆人类的符号 --__--||
  // @grid-columns默认是12
  // less没有for循环，但可以递归调用循环拼接字符串
  // .col-xs-1, .col-sm-1, .col-md-1, .col-lg-1,
  // .col-xs-2, .col-sm-2, .col-md-2, .col-lg-2,
  // .col-xs-3, .col-sm-3, .col-md-3, .col-lg-3,
  // ..........
  //  直到index为12，调用.col(@index, @list) when (@index > @grid-columns) 输出样式
  .col(@index, @list) when (@index =< @grid-columns) {
    @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }

  .col(@index, @list) when (@index > @grid-columns) {
    @{list} {
      position: relative;
      // Prevent columns from collapsing when empty
      // 防止当内容为空时盒子崩塌
      min-height: 1px;
      // Inner gutter via padding
      // 利用padding充当列之间的内间隔
      padding-left: ceil((@grid-gutter-width / 2));
      padding-right: floor((@grid-gutter-width / 2));
    }
  }

  .col(1)
}

//生成以下class
//.col-@class-1, .col-@class-2, .col-@class-3, .......
//  float: left;
//}
//@class 可以是 xs/sm/md/lg
.float-grid-columns(@class) {
  .col(@index) { // initial
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), @item);
  }
  .col(@index, @list) when (@index =< @grid-columns) { // general
    @item: ~".col-@{class}-@{index}";
    .col((@index + 1), ~"@{list}, @{item}");
  }
  .col(@index, @list) when (@index > @grid-columns) { // terminal
    @{list} {
      float: left;
    }
  }
  .col(1);
}

//生成以下class
//.col-xs/sm/md/lg-12 {
//  width: 100%;
//}
//.col-xs/sm/md/lg-11 {
//  width: 91.66666667%;
//}
//.......
//.col-xs/sm/md/lg-1 {
//  width: 8.33333333%;
//}
.calc-grid-column(@index, @class, @type) when (@type = width) and (@index > 0) {
  .col-@{class}-@{index} {
    //percentage：将一个值转换成百分数
    //eg: percentage(0.5); // returns `50%`
    width: percentage((@index / @grid-columns));
  }

}

//生成以下class
//.col-xs/sm/md/lg-push-12 {
//  left: 100%;
//}
//.col-xs/sm/md/lg-push-11 {
//  left: 91.66666667%;
//}
//.......
//.col-xs/sm/md/lg-push-0 {
//  left: auto;
//}
.calc-grid-column(@index, @class, @type) when (@type = push) and (@index > 0) {
  .col-@{class}-push-@{index} {
    left: percentage((@index / @grid-columns));
  }
}

.calc-grid-column(@index, @class, @type) when (@type = push) and (@index = 0) {
  .col-@{class}-push-0 {
    left: auto
  }
}

//生成以下class
//.col-xs/sm/md/lg-pull-12 {
//  right: 100%;
//}
//.col-xs/sm/md/lg-pull-11 {
//  right: 91.66666667%;
//}
//.......
//.col-xs/sm/md/lg-pull-0 {
//  right: auto;
//}
.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index > 0) {
  .col-@{class}-pull-@{index} {
    right: percentage((@index / @grid-columns));
  }
}

.calc-grid-column(@index, @class, @type) when (@type = pull) and (@index = 0) {
  .col-@{class}-pull-0 {
    right: auto;
  }
}

//生成以下class
//.col-xs/sm/md/lg-offset-12 {
//  margin-left: 100%;
//}
//.col-xs/sm/md/lg-offset-11 {
//  margin-left: 91.66666667%;
//}
//.......
//.col-xs/sm/md/lg-offset-0 {
//  margin-left: 0;
//}
.calc-grid-column(@index, @class, @type) when (@type = offset) {
  .col-@{class}-offset-@{index} {
    margin-left: percentage((@index / @grid-columns));
  }
}

// Basic looping in LESS
.loop-grid-columns(@index, @class, @type) when (@index >= 0) {
  .calc-grid-column(@index, @class, @type);
  // next iteration
  .loop-grid-columns((@index - 1), @class, @type)
}

// Create grid for specific class
.make-grid(@class) {
  .float-grid-columns(@class);
  .loop-grid-columns(@grid-columns, @class, width);
  .loop-grid-columns(@grid-columns, @class, pull);
  .loop-grid-columns(@grid-columns, @class, push);
  .loop-grid-columns(@grid-columns, @class, offset);
}
